AWSTemplateFormatVersion: 2010-09-09
Description: >
    This template creates a custom config rule that evaluates if the RDS instance is in the availability zone id specified
Parameters:
    AZId: 
        Type: String
        Default: use1-az1
        Description: Availability Zone ID
            
Resources:
    RDSAZConfigLambdaRoleEC2Policy: 
        Type: AWS::IAM::ManagedPolicy
        Properties: 
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W13
                    reason: "ec2:DescribeAvailabilityZones only supports * as Resource"
            PolicyDocument: 
                Version: '2012-10-17'
                Statement: 
                    - Effect: Allow
                      Action: ec2:DescribeAvailabilityZones
                      Resource: '*'

    RDSAZConfigLambdaRoleCWLogsPolicy: 
        Type: AWS::IAM::ManagedPolicy
        Properties: 
            PolicyDocument: 
                Version: '2012-10-17'
                Statement: 
                    - Effect: Allow
                      Action: logs:CreateLogGroup
                      Resource: !Join 
                        - ''
                        - - 'arn:'
                          - !Ref AWS::Partition
                          - ':logs:'
                          - !Ref AWS::Region
                          - !Ref AWS::AccountId
                          - ':*'
                    - Effect: Allow
                      Action:
                      - logs:CreateLogStreams
                      - logs:PutLogEvents
                      Resource: !Join
                        - ''
                        - - 'arn:'
                          - !Ref AWS::Partition
                          - ':logs:'
                          - !Ref AWS::Region
                          - !Ref AWS::AccountId
                          - ':log-group:/aws/lambda/RDSAZConfigRuleEvaluatorfunction:*'
    
    RDSAZConfigLambdaRole: 
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument:
                Version: '2012-10-17' 
                Statement: 
                    - Effect: Allow
                      Principal: 
                          Service: 
                              - lambda.amazonaws.com
                      Action: 
                          - 'sts:AssumeRole'
            ManagedPolicyArns: 
                - !Join ['', ['arn:', !Ref AWS::Partition, ':iam::aws:policy/service-role/AWSConfigRulesExecutionRole']]
                - !Ref RDSAZConfigLambdaRoleEC2Policy
                - !Ref RDSAZConfigLambdaRoleCWLogsPolicy
        DependsOn: 
            - RDSAZConfigLambdaRoleEC2Policy
            - RDSAZConfigLambdaRoleCWLogsPolicy
    ConfigPermission: 
        Type: AWS::Lambda::Permission
        Properties: 
            Action: lambda:InvokeFunction
            FunctionName: !Ref RDSAZConfigRuleEvaluator
            Principal: config.amazonaws.com
        
    
    RDSAZConfigRule: 
        Type: AWS::Config::ConfigRule
        Properties: 
            ConfigRuleName: RDSAZConfigRule
            Description: Checks if a DB runs in the AZ ID specified in the rule parameter
            EvaluationModes: 
                - Mode: DETECTIVE
            InputParameters: { "AvailabilityZoneId": !Ref AZId }
            Scope: 
                ComplianceResourceTypes: 
                   - 'AWS::RDS::DBInstance'
            Source: 
                Owner: CUSTOM_LAMBDA
                SourceDetails: 
                    - EventSource: aws.config
                      MessageType: ConfigurationItemChangeNotification
                    
                    - EventSource: aws.config
                      MessageType: OversizedConfigurationItemChangeNotification
                SourceIdentifier: !GetAtt 'RDSAZConfigRuleEvaluator.Arn'
    
    RDSAZConfigRuleEvaluator: 
            Type: AWS::Lambda::Function
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W58
                    reason: "Permissions to write to CloudWatch Logs are granted via RDSAZConfigLambdaRoleCWLogsPolicy"
                  - id: W89
                    reason: "This Lambda function does not interact with resources in VPC and putting it into a VPC will add cost to the solution due to VPC endpoints needed to interact with AWS APIs"
                  - id: W92
                    reason: "Failure to execute the function due to reaching the concurrent execution limit will only result in stale data. Reserving concurrent execution capacity might affect critical functions running in the same account."
            Properties: 
                FunctionName: RDSAZConfigRuleEvaluatorfunction
                Runtime: python3.12
                Timeout: 10
                Code: 
                    ZipFile: |
                        import botocore 
                        import boto3
                        import json
                        import datetime

                        # Set to True to get the lambda to assume the Role attached on the Config Service (useful for cross-account).
                        ASSUME_ROLE_MODE = False

                        # This gets the client after assuming the Config service role
                        # either in the same AWS account or cross-account.
                        def get_client(service, event):
                            """Return the service boto client. It should be used instead of directly calling the client.
                            Keyword arguments:
                            service -- the service name used for calling the boto.client()
                            event -- the event variable given in the lambda handler
                            """
                            if not ASSUME_ROLE_MODE:
                                return boto3.client(service)
                            credentials = get_assume_role_credentials(event["executionRoleArn"])
                            return boto3.client(service, aws_access_key_id=credentials['AccessKeyId'],
                                                aws_secret_access_key=credentials['SecretAccessKey'],
                                                aws_session_token=credentials['SessionToken']
                                            )

                        # Helper function used to validate input
                        def check_defined(reference, reference_name):
                            if not reference:
                                raise Exception('Error: ', reference_name, 'is not defined')
                            return reference

                        # Check whether the message is OversizedConfigurationItemChangeNotification or not
                        def is_oversized_changed_notification(message_type):
                            check_defined(message_type, 'messageType')
                            return message_type == 'OversizedConfigurationItemChangeNotification'

                        # Get configurationItem using getResourceConfigHistory API
                        # in case of OversizedConfigurationItemChangeNotification
                        def get_configuration(resource_type, resource_id, configuration_capture_time):
                            result = AWS_CONFIG_CLIENT.get_resource_config_history(
                                resourceType=resource_type,
                                resourceId=resource_id,
                                laterTime=configuration_capture_time,
                                limit=1)
                            configurationItem = result['configurationItems'][0]
                            return convert_api_configuration(configurationItem)

                        # Convert from the API model to the original invocation model
                        def convert_api_configuration(configurationItem):
                            for k, v in configurationItem.items():
                                if isinstance(v, datetime.datetime):
                                    configurationItem[k] = str(v)
                            configurationItem['awsAccountId'] = configurationItem['accountId']
                            configurationItem['ARN'] = configurationItem['arn']
                            configurationItem['configurationStateMd5Hash'] = configurationItem['configurationItemMD5Hash']
                            configurationItem['configurationItemVersion'] = configurationItem['version']
                            configurationItem['configuration'] = json.loads(configurationItem['configuration'])
                            if 'relationships' in configurationItem:
                                for i in range(len(configurationItem['relationships'])):
                                    configurationItem['relationships'][i]['name'] = configurationItem['relationships'][i]['relationshipName']
                            return configurationItem

                        # Based on the type of message get the configuration item
                        # either from configurationItem in the invoking event
                        # or using the getResourceConfigHistory API in getConfiguration function.
                        def get_configuration_item(invokingEvent):
                            check_defined(invokingEvent, 'invokingEvent')
                            if is_oversized_changed_notification(invokingEvent['messageType']):
                                configurationItemSummary = check_defined(invokingEvent['configurationItemSummary'], 'configurationItemSummary')
                                return get_configuration(configurationItemSummary['resourceType'], configurationItemSummary['resourceId'], configurationItemSummary['configurationItemCaptureTime'])
                            return check_defined(invokingEvent['configurationItem'], 'configurationItem')

                        # Check whether the resource has been deleted. If it has, then the evaluation is unnecessary.
                        def is_applicable(configurationItem, event):
                            try:
                                check_defined(configurationItem, 'configurationItem')
                                check_defined(event, 'event')
                            except:
                                return True
                            status = configurationItem['configurationItemStatus']
                            eventLeftScope = event['eventLeftScope']
                            if status == 'ResourceDeleted':
                                print("Resource Deleted, setting Compliance Status to NOT_APPLICABLE.")
                            return (status == 'OK' or status == 'ResourceDiscovered') and not eventLeftScope

                        def get_assume_role_credentials(role_arn):
                            sts_client = boto3.client('sts')
                            try:
                                assume_role_response = sts_client.assume_role(RoleArn=role_arn, RoleSessionName="configLambdaExecution")
                                return assume_role_response['Credentials']
                            except botocore.exceptions.ClientError as ex:
                                # Scrub error message for any internal account info leaks
                                if 'AccessDenied' in ex.response['Error']['Code']:
                                    ex.response['Error']['Message'] = "AWS Config does not have permission to assume the IAM role."
                                else:
                                    ex.response['Error']['Message'] = "InternalError"
                                    ex.response['Error']['Code'] = "InternalError"
                                raise ex

                        def evaluate_change_notification_compliance(configuration_item, rule_parameters):
                            check_defined(configuration_item, 'configuration_item')
                            check_defined(configuration_item['configuration'], 'configuration_item[\'configuration\']')
                            if rule_parameters:
                                check_defined(rule_parameters, 'rule_parameters')

                            if (configuration_item['resourceType'] != 'AWS::RDS::DBInstance'):
                                return 'NOT_APPLICABLE'

                            elif rule_parameters.get('AvailabilityZoneId'):
                                secondaryAvailabilityZone = configuration_item['configuration'].get('secondaryAvailabilityZone')

                                if (configuration_item['configuration']['availabilityZone'] != rule_parameters['AvailabilityZoneId']) & (secondaryAvailabilityZone != rule_parameters['AvailabilityZoneId']):
                                    return 'COMPLIANT'
                                
                            return 'NON_COMPLIANT'

                        # This maps the AZ ID received in the rule parameters to the respective AZ Name for the account
                        def map_azid_to_azname(azid, event):
                            ec2 = get_client('ec2', event)
                            az_name = ec2.describe_availability_zones(ZoneIds=[azid])['AvailabilityZones'][0]['ZoneName']
                            return az_name

                        def lambda_handler(event, context):

                            global AWS_CONFIG_CLIENT

                            check_defined(event, 'event')
                            invoking_event = json.loads(event['invokingEvent'])
                            rule_parameters = {}
                            if 'ruleParameters' in event:
                                rule_parameters = json.loads(event['ruleParameters'])

                            azId = rule_parameters.get('AvailabilityZoneId')
                            if azId:
                                azName = map_azid_to_azname(azId, event)
                                rule_parameters['AvailabilityZoneId'] = azName

                            compliance_value = 'NOT_APPLICABLE'

                            AWS_CONFIG_CLIENT = get_client('config', event)
                            configuration_item = get_configuration_item(invoking_event)
                            if is_applicable(configuration_item, event):
                                compliance_value = evaluate_change_notification_compliance(
                                        configuration_item, rule_parameters)

                            response = AWS_CONFIG_CLIENT.put_evaluations(
                            Evaluations=[
                                {
                                    'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                                    'ComplianceResourceId': invoking_event['configurationItem']['resourceId'],
                                    'ComplianceType': compliance_value,
                                    'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                                },
                            ],
                            ResultToken=event['resultToken'])

                Handler: index.lambda_handler
                Role: !GetAtt 'RDSAZConfigLambdaRole.Arn'
            DependsOn: 
                - RDSAZConfigLambdaRole